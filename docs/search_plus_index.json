{"./":{"url":"./","title":"はじめに","keywords":"","body":"【タイトル】 第26回目の開催となる【タイトル】です！ 今回のやりたいこと GoogleMapではお気に入りの地図情報をリストとして保存することが出来ますが、リスト内の検索が出来ません・・・。では、作ってしまおう!!ということで、 今回は、お気に入りの地図情報をBigQueryに溜めて絞り込みを行い、GoogleMapに反映してみたいと思います！BigQueryの絞り込みや、GoogleMapの反映はGoogleMapAPI・BigQueryAPIを使用します。また、開発の実行環境はCloud Shell Editer、バックエンドのサーバーはClud Functionを使用します。 事前準備 Googleアカウント作成 GCPアカウントの作成 手順 全体手順としては次の流れで進めます。 0.事前準備内容の確認 1.テストデータの登録 2.検索プログラムの作成 3.GoogleMapへ反映 技術要素 参考サイトのリンクを記載しておきますので、参考にお使いください。 GoogleMapAPI BigQueryAPI JSON形式のBigQuery取り込み 今回の手順ではGoogleChromeのみ使用します。OS問わずハンズオン可能です。 "},"Section1.html":{"url":"Section1.html","title":"0. 事前準備内容の確認","keywords":"","body":"事前準備内容の確認 GCPアカウントの確認 以下URLにアクセスしGCPコンソールへログインすると、下記のようなダッシュボード画面が表示されることを確認します。https://console.cloud.google.com/ GCPのAPI有効化 検索バーから「BigQuery API」と検索し、BigQueryAPIを有効化します。 検索バーから「Maps JavaScript API」と検索し、GoogleMapJavaScriptAPIを有効化します。 検索バーから「Cloud Functions API」と検索し、Cloud Functions APIを有効化します。 "},"Section2.html":{"url":"Section2.html","title":"1. テストデータの登録","keywords":"","body":"テストデータの登録 GoogleMapのデータをBigQueryで絞り込みを行っていくにあたり、まずは絞り込むためのテストデータをBigQueryに登録します。テストデータは、緯度経度が記述されているJSON形式とします。今回は、GoogleMapで『スター』を付けた住所をExportし、テストデータとして使用したいと思います。 テストデータの作成 GoogleMapを開きます。 https://www.google.co.jp/maps お気に入りの場所を選択し、『スター付き』を選択します。複数スターを付けていきます。 テストデータのエクスポート Googleデータエクスポートを開きます。https://takeout.google.com/settings/takeout「選択をすべて解除」選択し、「マップ（マイプレイス）」のみ選択します。「次のステップ」　＞　「エクスポート作成」をクリックします。「ダウンロード」をクリックします。ダウンロードしたZIPファイルを解凍し、JSON形式でスターを付けた情報が存在することを確認します。 テストデータのBigQueryへ登録する BigQueryを開きます。https://console.cloud.google.com/bigqueryCloud Shellを開きます。テストデータの形式に合うテーブル定義を作成します。 echo '[{\"name\": \"type\",\"type\": \"STRING\",\"mode\": \"NULLABLE\"},{\"name\": \"features\",\"type\": \"RECORD\",\"mode\": \"REPEATED\",\"fields\": [{\"name\": \"geometry\",\"type\": \"RECORD\",\"mode\": \"REPEATED\",\"fields\": [{\"name\": \"coordinates\",\"type\": \"NUMERIC\",\"mode\": \"REPEATED\",\"fields\": []},{\"name\": \"type\",\"type\": \"STRING\",\"mode\": \"NULLABLE\"}]},{\"name\": \"properties\",\"type\": \"RECORD\",\"mode\": \"REPEATED\",\"fields\": [{\"name\": \"GoogleMapsURL\",\"type\": \"STRING\",\"mode\": \"NULLABLE\"},{\"name\": \"Location\",\"type\": \"RECORD\",\"mode\": \"REPEATED\",\"fields\": [{\"name\": \"Address\",\"type\": \"STRING\",\"mode\": \"NULLABLE\"},{\"name\": \"BusinessName\",\"type\": \"STRING\",\"mode\": \"NULLABLE\"},{\"name\": \"GeoCoordinates\",\"type\": \"RECORD\",\"mode\": \"REPEATED\",\"fields\": [{\"name\": \"Latitude\",\"type\": \"STRING\",\"mode\": \"NULLABLE\"},{\"name\": \"Longitude\",\"type\": \"STRING\",\"mode\": \"NULLABLE\"}]}]},{\"name\": \"Published\",\"type\": \"STRING\",\"mode\": \"NULLABLE\"},{\"name\": \"Title\",\"type\": \"STRING\",\"mode\": \"NULLABLE\"},{\"name\": \"Updated\",\"type\": \"STRING\",\"mode\": \"NULLABLE\"}]},{\"name\": \"type\",\"type\": \"STRING\",\"mode\": \"NULLABLE\"}]}]' > ddl.json データセットを作成します。 bq mk --dataset --location=asia-northeast1 TEST2 bq mk --table TEST2.TEST2 ddl.json テストデータをアップロードします。BigQueryにJSON形式を取り込み場合、JSON内の改行は除外する必要があるため、以下コマンドで置換します。 sed -z 's/\\n//g' 保存した場所.json | sed -z 's/Google Maps URL/GoogleMapsURL/g' | sed -z 's/Business Name/BusinessName/g' | sed -z 's/Geo Coordinates/GeoCoordinates/g' > test_data.json テストデータを登録します。 bq load --source_format=NEWLINE_DELIMITED_JSON TEST2.TEST4 test_data.json SQLエディターから、テストデータが登録されているかを確認します。 SELECT * FROM TEST2.TEST2 "},"Section3.html":{"url":"Section3.html","title":"2. 検索プログラムの作成","keywords":"","body":"検索プログラムの作成 この手順では、BigQueryを検索するプログラムをJavaScriptで作成します。また、作成したプログラムはNode.Jsで実行するため、サーバーレスで実行可能なCloud Funcitonにデプロイしていきます。 Cloud Functionの設定 Cloud Functionを設定します。【ToDo】詳細な設定手順を記載する BigQueryAPIのコード BigQueryAPIにアクセスするコードを記述していきます。 requireでBigQueryAPIを読み込みます。 const { BigQuery } = require('@google-cloud/bigquery'); BigQueryのオブジェクトを生成し、BigQueryのプロジェクトIDを記述します。プロジェクトIDはアカウントによって異なります。 const bigquery = new BigQuery({ projectId: '【プロジェクトID】' }); BigQueryを検索するSQLを記述します。今回はAddressをLIKE検索で絞り込みたいと思います。 const query = \"SELECT \"+ \" features.properties.Location.GeoCoordinates.Latitude AS Latitude \"+ \" , features.properties.Location.GeoCoordinates.Longitude AS Longitude \"+ \" , features.properties.Location.BusinessName AS BusinessName \"+ \"FROM TEST.TEST1 \"+ \"WHERE features.properties.Location.Address LIKE '%【検索キーワード】%'\"; BigQueryに登録されているデータは、ネストされた形式になっています。通常のSQLだとエラーとなるため、LegacySQLで取得する必要があるため、useLegacySqlを\"true\"に設定します。 //with options const options = { query: query, useLegacySql: true, } 次にメイン処理を追加します。 BigQueryAPIにリクエストを投げて、レスポンス情報を取得する簡単なロジックになります。 exports.main = (req, res) => { bigquery.createQueryJob(options) .then(results => { const [job] = results; return job.getQueryResults(); }) .then(results => { const [rows] = results; res.header('Access-Control-Allow-Origin', \"*\"); res.header('Access-Control-Allow-Headers', \"Origin, X-Requested-With, Content-Type, Accept\"); res.status(200).send(rows); }) .catch(error => { console.log(error); }) } 最後に、BigQueryにアクセスするため、BigQueryAPIの依存関係を追加します。 \"dependencies\": { \"@google-cloud/bigquery\": \"^5.10.0\" } Cloud Functionをデプロイします。 【ToDo】詳細な設定手順を記載する 動作確認をします。 以上で、バックエンドの処理は完了です。 "},"Section4.html":{"url":"Section4.html","title":"3. GoogleMapへ反映","keywords":"","body":"GoogleMapへ反映 この手順では、GoogleMapJavaSciriptAPIを使い、BigQueryの情報を絞り込んでピン止めするプログラムをWeb上で開発出来るCloud Shell Editerを使って開発していきます。また、開発したプログラムはCloud Shell Editerで実行し、動作確認をしていきます。 ソースコードの取得 Googleが提供しているSimpleMapのソースコードをベースに作成していきます。 Googleドキュメントを開きます。https://developers.google.com/maps/documentation/javascript/examples/map-simple 少しページをスクロールしたところにサンプルのソースコードがあります。Google Cloud Shellを選択し、コードを取得します。 Cloud Shell Editerが開き、ソースコードが配置されています。フロントエンドの動作確認は全てCloud Shell Editer上から可能です。 まずは、サンプルコードを実行してみましょ。左欄からDebugを選び、再生ボタンをクリックします。 右上にあるプレビューボタンからWebページの動作を確認します。 BigQueryとの連携 手順②で作成したCloud FunctionではBigQueryにアクセスし、検索結果をレスポンスで返却しているので、Cloud FuctionのURLをTypeScriptから実行し、レスポンス情報を取得して、GoogleMapAPIに反映します。 Cloud Functionにアクセスし、レスポンス情報から緯度経度と、建物名を取得します。 var center; var data = new Array(); fetch(`https://us-central1-sinuous-branch-322702.cloudfunctions.net/function-2`) .then(response => { console.log(response.status); response.json().then(userInfo => { for (var i = 0; i 緯度経度にピン立てをします。複数の住所情報がBigQueryから渡されることを考慮し、ループ処理でピン立てをします。ピン立ての変数を宣言します。 let marker: google.maps.Marker; 処理を追加します。 for (var i = 0; i 建物名を吹き出しに追加します。吹き出しの変数を宣言します。 let infoWindow: google.maps.InfoWindow; 処理を追加します。 infoWindow = new google.maps.InfoWindow({ position: data[i].position, content: data[i].content, }); infoWindow.open(map); プレビューボタンより、動作を確認します。 BigQueryに登録したスター情報を絞り込んで検索出来ています。また、ピンや吹き出しも追加出来ています。 "},"Section5.html":{"url":"Section5.html","title":"4. おまけ","keywords":"","body":"おまけ 最後に、APIの無効化や、作成したものを削除をします。 ※無料期間が終了しても自動で課金されることはありません　GCP内をCleanUpしたい方は以下手順を行ってください API無効化 BigQueryの削除 Cloud Functionの削除 "}}